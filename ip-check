#!/usr/bin/env python
# -*- coding: utf8 ft: python -*-

# Copyright (c) 2012 Svante Kvarnström <sjk@ankeborg.nu>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import re
import smtplib
import urllib2

# Edit config as you see fit. It should be fairly selfexplanatory.
config = {
        'loopia': 'http://dns.loopia.se/checkip/checkip.php?raw',
        'ipfile': '/tmp/ip.txt',
        'from_addr': 'sok@ankeborg.nu',
        'to_addr': 'sjk@ankeborg.nu',
        'smtp_out': 'mailout.comhem.se'
}


def get_ip():
    '''Returns external ip address'''
    try:
        f = urllib2.urlopen(config["loopia"])
    except urllib2.URLError, e:
        print "Could not open {}: {}".format(config["loopia"], e)
        exit()

    data = f.read()
    ip = re.search(r'((?:\d{1,3}\.){3}\d{1,3})', data).group(1)
    return ip

def is_new_ip(newip):
    '''Compares new ip with old ip.

    Creates new ip file with current ip if nonexistent and returns True.
    If ip in file is equal to ip from Loopia, returns False'''
    try:
        f = open(config["ipfile"], 'r+')
        oldip = f.read().rstrip()
    except IOError:
        f = open(config["ipfile"], 'w')
        f.write(newip)
        f.close()
        return True

    if newip == oldip:
        f.close()
        return False
    else:
        f.truncate()
        f.write(newip)
        f.close()
        return True

def email_ip(ip):
    msg = r"From: {}\r\nTo: {}\r\nSubject: {}\r\n\r\nMin IP-adress är {}".format(config["from_addr"], config["to_addr"], ip, ip)

    server = smtplib.SMTP_SSL(config["smtp_out"])
    #server.set_debuglevel(1)
    server.sendmail(config["from_addr"], config["to_addr"], msg)
    server.quit()

def main():
    extip = get_ip()

    if is_new_ip(extip):
        print "Det är ett nytt ip!"
        email_ip(extip)


if __name__ == '__main__':
    main()
